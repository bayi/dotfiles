#!/usr/bin/env python3

import sys
import select
import json
import subprocess

#zenity --list --title="Teszt" --text="Szoveg" --column= --hide-header a b c

BUTTON_SIZE = 9
GREEN = '#719e07'
GRAY = '#93a1a1'
RED = '#cb4b16'
ORANGE = '#b58900'
BLUE = '#268bd2'

OUTPUT = {'full_text': ''}
INPUT = {'button': 0}
STATUS = {
    'launcher': {
        'icon': '',
        'color': GREEN,
        'start': 'qdmenu',
        'stop': 'qdmenu',
        'status': 'running',
    },
    'docker': {
        'icon': '',
        'color': GRAY,
        'start': 'sudo systemctl start docker',
        'stop': 'sudo systemctl stop docker',
        'status': 'unknown',
    },
    'vnc': {
        'icon': '',
        'color': GRAY,
        'start': 'systemctl --user start vnc',
        'stop': 'systemctl --user stop vnc',
        'status': 'unknown',
    },
}

def check():
    docker = subprocess.check_output('systemctl show -p SubState docker | cut -d\'=\' -f2',
                                     universal_newlines=True,
                                     shell=True).rstrip()
    if docker == 'running':
        STATUS['docker']['color'] = GREEN
    elif docker == 'dead':
        STATUS['docker']['color'] = GRAY
    else:
        STATUS['docker']['color'] = ORANGE
    STATUS['docker']['status'] = docker

    vnc = subprocess.check_output('systemctl --user show -p SubState vnc | cut -d\'=\' -f2',
                                     universal_newlines=True,
                                     shell=True).rstrip()
    if vnc == 'running':
        STATUS['vnc']['color'] = GREEN
    elif vnc == 'dead':
        STATUS['vnc']['color'] = GRAY
    else:
        STATUS['vnc']['color'] = ORANGE
    STATUS['vnc']['status'] = vnc

def refresh():

    OUTPUT['full_text'] = ''
    for button in STATUS:
        OUTPUT['full_text'] += '<span color="' + \
            STATUS[button]['color'] + \
            '">(<span size="small">' + \
            STATUS[button]['icon'] + \
            '</span>)</span> '

    if INPUT['button'] != 0:
        INPUT['button'] = 0
        relx = int(INPUT['relative_x'] / (9 * 3))
        keys = list(STATUS.keys())
        try:
            key = keys[relx]
            item = STATUS[key]
            if item['status'] == 'running':
                subprocess.Popen(item['stop'], shell=True)
            else:
                subprocess.Popen(item['start'], shell=True)
        except IndexError:
            pass

    print(json.dumps(OUTPUT))
    sys.stdout.flush()

def fetchInput():
    rlist, _, _ = select.select([sys.stdin], [], [], 1)
    if rlist:
        line = sys.stdin.readline().rstrip()
        if line != '':
            return json.loads(line)
    return INPUT


while True:
    check()
    refresh()
    INPUT = fetchInput()

sys.exit()
